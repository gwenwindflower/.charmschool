{
  "Jinja statement": {
    "prefix": ["jstate", "statement"],
    "body": ["{% $1 %}"],
    "description": "Jinja statement"
  },
  "Jinja comment": {
    "prefix": ["jcom", "comment"],
    "body": ["{#- $1 -#}"],
    "description": "Jinja comment"
  },
  "Jinja expression": {
    "prefix": ["jexp", "expression"],
    "body": ["{{ $1 }}"],
    "description": "Jinja expression"
  },
  "Jinja do": {
    "prefix": ["jdo", "do"],
    "body": ["{% do $1 %}"],
    "description": "Jinja do"
  },
  "Jinja filter": {
    "prefix": ["jfilt", "filter"],
    "body": ["{% filter ${1:filter} %}", "  $2", "{% endfilter %}"],
    "description": "Jinja filter"
  },
  "import CTE": {
    "prefix": ["imc", "import_cte"],
    "body": [
      "${1:cte_name} as (",
      "",
      "select * from {{ ref('${2:model}') }}",
      "",
      "),",
      ""
    ],
    "description": "Import CTE"
  },
  "Jinja for": {
    "prefix": ["jfor", "for"],
    "body": ["{% for ${1:item} in ${2:sequence} %}", "  $3", "{% endfor %}"],
    "description": "Jinja for"
  },
  "Jinja for {dict}": {
    "prefix": ["jford", "for_dict"],
    "body": [
      "{% for ${1:key}, ${2:value} in ${3:dict}.items() %}",
      "  $4",
      "{% endfor %}"
    ],
    "description": "Jinja for {dict}"
  },
  "Jinja for [list]": {
    "prefix": ["jforl", "for_list"],
    "body": ["{% for ${1:item} in [${2:list}] %}", "  $3", "{% endfor %}"],
    "description": "Jinja for [list]"
  },
  "Jinja if": {
    "prefix": ["jif", "if"],
    "body": ["{% if ${1:expr} %}", "  $2", "{% endif %}"],
    "description": "Jinja if"
  },
  "Jinja macro": {
    "prefix": ["jmac", "macro"],
    "body": ["{% macro ${1:name}(${2:args}) %}", "  $3", "{% endmacro %}"],
    "description": "Jinja macro"
  },
  "Jinja set var": {
    "prefix": ["sv", "jset", "set"],
    "body": "{% set ${1:var} = ${2:value} %}",
    "description": "Jinja set variable"
  },
  "Jinja set block": {
    "prefix": ["jsetb", "set_block"],
    "body": ["{% set ${1:name} %}", "  $2", "{% endset %}"],
    "description": "Jinja set block"
  },
  "snapshot": {
    "prefix": ["snap", "snapshot"],
    "body": [
      "{% snapshot ${1:snapshot_name} %}",
      "",
      "{{",
      "   config(",
      "       target_database='${2:target_database}',",
      "       target_schema='${3:target_schema}',",
      "       unique_key='${4:unique_key}',",
      "",
      "       strategy='${5:strategy}',",
      "       updated_at='${6:updated_at}',",
      "   )",
      "}}",
      "",
      "",
      "{% endsnapshot %}"
    ],
    "description": "dbt snapshot"
  },
  "dbt config": {
    "prefix": ["dcon", "config"],
    "body": [
      "{{",
      "  config(",
      "    materialized = '${1:materialization}',",
      "    )",
      "}}"
    ],
    "description": "dbt config"
  },
  "dbt incremental config": {
    "prefix": ["dcoi", "config_incremental"],
    "body": [
      "{{",
      "  config(",
      "    materialized = 'incremental',",
      "    unique_key = '${1:id}',",
      "    )",
      "}}"
    ],
    "description": "dbt incremental config"
  },
  "dbt environment variable": {
    "prefix": ["ev", "envvar"],
    "body": ["{{ env_var(\"${1:env_var_name}\") }}"],
    "description": "dbt environment variable"
  },
  "CTE": {
    "prefix": "cte",
    "body": ["${1:cte_name} as (", "", "    ${2:cte_logic}", "", "),", ""],
    "description": "cte"
  },
  "case when": {
    "prefix": ["cw", "casewhen"],
    "body": [
      "case",
      "    when ${1:condition} then ${2:then}",
      "    else ${3:else}",
      "end"
    ],
    "description": "case when"
  },
  "dbt load result": {
    "prefix": ["dlr", "load_result"],
    "body": ["load_result('${1:statement_name}')"],
    "description": "load result"
  },
  "dbt log": {
    "prefix": ["dlog", "log"],
    "body": ["{{ log(${1:var}, info=${2|True,False|}) }}"],
    "description": "dbt log"
  },
  "dbt log variable": {
    "prefix": ["dlv", "log_var"],
    "body": ["{{ log('${1:var}: ' ~ ${1:var}, info=${2|True,False|}) }}"],
    "description": "log variable value"
  },
  "dbt call statement": {
    "prefix": ["dstat", "statement"],
    "body": [
      "{% call statement(${1:name}, fetch_result=${2|True,False|}) %}",
      "  ${3:select 1}",
      "{% endcall %}"
    ],
    "description": "dbt call tatement"
  },
  "dbt ref": {
    "prefix": ["dr", "ref"],
    "body": ["{{ ref('${1:model_name}') }}"],
    "description": "dbt ref"
  },
  "dbt return": {
    "prefix": ["dret", "return"],
    "body": ["{{ return(${1}) }}"],
    "description": "dbt return"
  },
  "dbt variable expression": {
    "prefix": ["ve", "var_exp"],
    "body": ["{{ var('${1:var_name}') }}"],
    "description": "dbt variable expression"
  },
  "dbt source": {
    "prefix": ["ds", "source"],
    "body": ["{{ source('${1:source}', '${2:table_name}') }}"],
    "description": "dbt source"
  },
  "dbt incremental block": {
    "prefix": ["dii", "is_incremental"],
    "body": [
      "{% if is_incremental() %}",
      "  and ${1:prefix}.${2:date_col} >= coalesce((select max(${2:date_col}) from {{ this }}), '1900-01-01')",
      "{% else %}",
      "  ${3:optional_cond}",
      "{% endif %}"
    ],
    "description": "dbt incremental Block"
  }
}
